class Man {
    field int x,y,location;
    field int memAddress;
    field int temp,number;

    constructor Man new(int Ax,int By) {
        let memAddress=0;
        let x=Ax;
        let y=By;
        let temp=222;
        let number=0;
        let location=((y*32)+(x/16));
        do drawman(x,y);
        return this;
    }

    method int getNumber(){
        return number;
    }
    method int getTemp(){
        return temp;
    }
    //draws man by pixels out of four parts
    method void drawman (int Ax,int By) {
        let location=((By*32)+(Ax/16));
        do draw1();
        do draw2();
        do draw3();
        do draw4();
        return;
    }

    method void draw1() {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, -512);
        do Memory.poke(memAddress+32, -128);
        do Memory.poke(memAddress+64, 448);
        do Memory.poke(memAddress+96, 192);
        do Memory.poke(memAddress+128, 96);
        do Memory.poke(memAddress+160, 6240);
        do Memory.poke(memAddress+192, 6240);
        do Memory.poke(memAddress+224, 96);
        do Memory.poke(memAddress+256, 96);
        do Memory.poke(memAddress+288, 8288);
        do Memory.poke(memAddress+320, 24672);
        do Memory.poke(memAddress+352, -16192);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, -128);
        do Memory.poke(memAddress+448, -64);
        do Memory.poke(memAddress+480, -32);
        return;
    }

    method void draw2() {
        let memAddress = 16384+1+location;
        do Memory.poke(memAddress+0, 127);
        do Memory.poke(memAddress+32, 511);
        do Memory.poke(memAddress+64, 896);
        do Memory.poke(memAddress+96, 768);
        do Memory.poke(memAddress+128, 1536);
        do Memory.poke(memAddress+160, 1560);
        do Memory.poke(memAddress+192, 1560);
        do Memory.poke(memAddress+224, 1536);
        do Memory.poke(memAddress+256, 1536);
        do Memory.poke(memAddress+288, 1540);
        do Memory.poke(memAddress+320, 1542);
        do Memory.poke(memAddress+352, 771);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 511);
        do Memory.poke(memAddress+448, 1023);
        do Memory.poke(memAddress+480, 2047);
        return;
    }
    method void draw3() {
        let memAddress = 16384+512+location;
        do Memory.poke(memAddress+0, -32);
        do Memory.poke(memAddress+32, -80);
        do Memory.poke(memAddress+64, -72);
        do Memory.poke(memAddress+96, -100);
        do Memory.poke(memAddress+128, -114);
        do Memory.poke(memAddress+160, -125);
        do Memory.poke(memAddress+192, -127);
        do Memory.poke(memAddress+224, -127);
        do Memory.poke(memAddress+256, -256);
        do Memory.poke(memAddress+288, 3584);
        do Memory.poke(memAddress+320, 3840);
        do Memory.poke(memAddress+352, 1920);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 448);
        do Memory.poke(memAddress+480, 248);
        return;
    }
    method void draw4() {
        let memAddress = 16384+513+location;
        do Memory.poke(memAddress+0, 2047);
        do Memory.poke(memAddress+32, 3583);
        do Memory.poke(memAddress+64, 7679);
        do Memory.poke(memAddress+96, 14847);
        do Memory.poke(memAddress+128, 29183);
        do Memory.poke(memAddress+160, -15873);
        do Memory.poke(memAddress+192, -32257);
        do Memory.poke(memAddress+224, -32257);
        do Memory.poke(memAddress+256, 255);
        do Memory.poke(memAddress+288, 112);
        do Memory.poke(memAddress+320, 240);
        do Memory.poke(memAddress+352, 480);
        do Memory.poke(memAddress+384, 384);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 896);
        do Memory.poke(memAddress+480, 7936);
        return;
    }
    //moves the man upwards
    method void run2() {
            var boolean exit;
            var char key;
            var Man a;
            let exit = false;
            if (~exit) {
                if (~exit) {
                    do drawman(20,temp);
                    do erase(20,temp);
                    let temp=temp-2;
                    do drawman(20,temp);
                    if(temp=150){
                    do Sys.wait(10);
                    let number=1;
                }
            }
            }
            return;
        }

//moves the man downwards
        method void run3() {
            var boolean exit;
            var char key;
            var Man a;
            let exit = false;
            if (~exit) {
                do drawman(20,temp);
                do erase(20,temp);
                let temp=temp+2;
                do drawman(20,temp);
                if(temp=222){
                    let number=0;
                }
            }
            return;
        }


//erases man's shape by it's four parts
    method void erase (int Ax,int By) {
        let location=((By*32)+(Ax/16));
        do erase1();
        do erase2();
        do erase3();
        do erase4();
        return;
    }

    method void erase1() {
        let memAddress = 16384+location;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    method void erase2() {
        let memAddress = 16384+location+1;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    method void erase3() {
        let memAddress = 16384+location+512;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    method void erase4() {
        let memAddress = 16384+location+513;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
    //disposes class objects memory
    method void dispose() {
        do Memory.deAlloc(this);
        return;
      }
}